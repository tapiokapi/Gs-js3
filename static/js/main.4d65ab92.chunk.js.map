{"version":3,"sources":["firebase/index.js","firebase/config.js","components/Message.js","components/ChatBox.js","components/AppChat.js","reportWebVitals.js","index.js"],"names":["firebaseDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","styles","chip","margin","wrapper","display","flexWrap","Message","className","disabled","src","this","props","message","profile_image","style","marginBottom","user_name","text","React","Component","ChatBox","name","onChange","onTextChange","placeholder","rows","multiLine","primary","label","onClick","onButtonClick","messagesRef","ref","AppChat","bind","state","messages","map","m","i","e","target","setState","value","push","alert","on","snapshot","val","msgs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d65ab92.chunk.js","sourcesContent":["// データベース参照用のインスタンス？の作成\n// インスタンス：設計図を元にして実際に作ったもの\n// このファイルをimportすれば、どこのファイルからでもデータベースへのアクセスを可能になる。\nimport firebase from 'firebase';\nimport { firebaseConfig } from './config.js';\n\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const firebaseDb = firebaseApp.database()","// Your web app's Firebase configuration\n// 作成したFirebaseの設定を記載する\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyCZwGh3SRL48GsSHm6hEzr_LckVYR-2TwE\",\n  authDomain: \"my-chat-6a7c4.firebaseapp.com\",\n  databaseURL: \"https://my-chat-6a7c4.firebaseio.com\",\n  projectId: \"my-chat-6a7c4\",\n  storageBucket: \"my-chat-6a7c4.appspot.com\",\n  messagingSenderId: \"887027834815\",\n  appId: \"1:887027834815:web:226738c2e97547696bcb0a\"\n};","import React from \"react\";\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Avatar from 'material-ui/Avatar';\nimport List from 'material-ui/List/List';\nimport ListItem from 'material-ui/List/ListItem';\nimport Chip from 'material-ui/Chip';\n\nconst styles = {\n  chip: {\n    margin: 4,\n  },\n  wrapper: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n};\n\n// もしかして必要ないかも？\nconst style = {margintop: -5};\n\n// 投稿されたチャット内容のUI\nexport default class Message extends React.Component {\n  render() {\n    return (\n      <div className=\"Message\">\n        <List>\n          <ListItem disabled=\"true\">\n            <Avatar className=\"\" src={this.props.message.profile_image} />\n            {/* アイコン表示（ユーザ名も表示） */}\n            <span style={{marginBottom: -5}}>@{this.props.message.user_name}</span>\n            <div className=\"\">\n              <Chip style={styles.chip} >\n                {/* メッセージ入力欄 */}\n                {this.props.message.text}\n              </Chip>\n            </div>\n          </ListItem>\n        </List>\n      </div>\n    );\n  }\n}","import React from \"react\";\n// Material UIのパーツを利用する\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\n// チャットの投稿フォームのUI\nexport default class ChatBox extends React.Component {\n  render() {\n    return(\n      // MuiThemeProviderで、囲んだ場所からこ要素すべてに一定のスタイルを適用できる\n      <MuiThemeProvider>\n        <div className=\"ChatBox\">\n          <div className=\"\">\n            {/* propsはプロパティの意味。一度設定してしまえば後から変更はできない */}\n            {/* TextFieldを使用すると、ユーザーはテキストを入力および編集できる */}\n            {/* ユーザ名 */}\n            <TextField name='user_name' onChange={this.props.onTextChange} className=\"\" placeholder=\"Name\" />\n            <br></br>\n            {/* プロフィールアイコンのURL入力欄 */}\n            <TextField name='profile_image' onChange={this.props.onTextChange} className=\"\" placeholder=\"Profile Image URL\" />\n          </div>\n          {/* テキスト入力欄 */}\n          <TextField rows=\"4\" multiLine=\"true\" name='text' className=\"\" onChange={this.props.onTextChange} />\n          {/* 送信（send）ボタン */}\n          <RaisedButton primary=\"true\" label=\"Send\" className=\"\"    onClick={this.props.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './../App.css';\nimport { firebaseDb } from './../firebase/index.js'\n// 投稿されたメッセージ内容のUIをインポート\nimport Message from './Message.js'\n// チャット投稿フォームのUIをインポート\nimport ChatBox from './ChatBox.js'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\n// firebaseへの参照を取得する\nconst messagesRef = firebaseDb.ref('messages');\n\nclass AppChat extends Component {\n  // Props：一度設定してしまえば後から変更はできない（constのようなもの？）\n  constructor(props) {\n    super(props);\n    this.onTextChange = this.onTextChange.bind(this)\n    this.onButtonClick = this.onButtonClick.bind(this)\n    this.state = {\n      text: \"\", // 入力されたメッセージのテキスト\n      user_name: \"\",  //入力されたユーザ名\n      profile_image: \"\",  //入力されたプロフィール画像のURL\n      messages: []  //保存されている全てのメッセージ\n    }\n  }\n\n  render() {\n    return (\n      // MuiThemeProviderで、囲んだ場所からこ要素すべてに一定のスタイルを適用できる\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <h2>Chatアプリ</h2>\n          </div>\n          <div className=\"MessageList\">\n            {/* map()メソッドは、与えられた関数を配列の全ての要素に対して実行し、その結果から新しい配列を作る */}\n            {this.state.messages.map((m, i) => {\n              return <Message key={i} message={m} />\n            })}\n          </div>\n          <ChatBox onTextChange={this.onTextChange} onButtonClick={this.onButtonClick} />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n\n  // ユーザー名、メッセージのテキスト、画像URLが変更されるたびにstate?が更新される\n  // State：状態を管理するとのこと。Propsと違って後から変更可能。（letのようなもの？）\n  onTextChange(e) {\n    if(e.target.name == 'user_name') {\n      this.setState({\n        \"user_name\": e.target.value,\n      });\n    } else if (e.target.name == 'profile_image') {\n      this.setState({\n        \"profile_image\": e.target.value,\n      });\n    } else if (e.target.name == 'text') {\n      this.setState({\n        \"text\": e.target.value\n      });\n    }\n  }\n\n  // 送信（send）ボタンをクリックした時の処理\n  onButtonClick() {\n    // バリデーション（空欄になっていないかのチェック）\n    if(this.state.user_name == \"\") {\n      alert('user_name empty')\n      return\n    } else if(this.state.text == \"\") {\n      alert('text empty')\n      return\n    }\n    // firebaseにメッセージを登録する\n    // pushメソッドは新しい要素を追加するたびに一意のIDを付与するとのこと。これによって生成されるIDはタイムスタンプに基づいているため、リストのアイテムは自動的に時系列に並び替えられるとのこと。便利。。。\n    messagesRef.push({\n      \"user_name\": this.state.user_name,\n      \"profile_image\": this.state.profile_image,\n      \"text\": this.state.text\n    });\n  }\n\n  // データベースの変更をキャッチ\n  // データベース内に新しい子要素が追加されるたびに、stateのmessagesも更新されるので、画面の見た目も更新される。\n  componentWillMount() {\n    messagesRef.on('child_added', (snapshot) => {\n      // 値を取得\n      const m = snapshot.val();\n      let msgs = this.state.messages\n\n      msgs.push({\n        'text': m.text,\n        'user_name': m.user_name,\n        'profile_image': m.profile_image\n      });\n\n      this.setState({\n        messages: msgs\n      });\n    });\n  }\n  \n}\n\nexport default AppChat;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport AppChat from './components/AppChat';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<AppChat />, document.getElementById('root'));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}